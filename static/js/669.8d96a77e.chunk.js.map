{"version":3,"file":"static/js/669.8d96a77e.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAU,mCAEVC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAA,qCAAwCC,IADtC,cACnBE,EADmB,yBAElBA,EAASC,MAFS,2CAAH,qDAKXC,EAAQ,mCAAG,WAAMC,GAAN,uFACCN,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCK,EADnC,gCADD,cAChBH,EADgB,yBAIfA,EAASC,MAJM,2CAAH,sDAORG,EAAU,mCAAG,WAAMC,GAAN,uFACDR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,oBACOP,EADP,oBADC,cAClBE,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAOVK,EAAO,mCAAG,WAAMD,GAAN,uFACER,EAAAA,EAAAA,IAAA,gBACZQ,EADY,qEADF,cACfL,EADe,yBAIdA,EAASC,KAAKM,MAJA,2CAAH,sDAOPC,EAAU,mCAAG,WAAMH,GAAN,uFACDR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,4EADC,cAClBL,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,qD,iHC7BVQ,EAAUC,EAAAA,GAAAA,IAAH,2JAUPC,EAAQD,EAAAA,GAAAA,MAAH,mHAOLE,GAAOF,EAAAA,EAAAA,IAAOG,EAAAA,IAAPH,CAAH,+F,SCjBJI,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAEjC,OACE,UAACP,EAAD,YACE,SAACG,EAAD,KACA,SAACD,EAAD,CACEM,KAAK,OACLF,MAAOA,EACPC,SAAU,SAACE,GAAD,OAAOF,EAASE,EAAEC,OAAOJ,MAAzB,MAIjB,E,0BCQD,EAnBe,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACVC,GAAWC,EAAAA,EAAAA,MAEjB,OAAKF,GAGH,wBACGA,EAAOG,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAxC,SACGG,EAAMK,SAFFL,EAAME,GAMlB,OAZe,SAACI,EAAA,EAAD,GAerB,E,2BCOD,EAtBmB,WAAO,IAAD,EACvB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACM9B,EAAK,UAAG6B,EAAaE,IAAI,gBAApB,QAAgC,GAC3C,ECNsB,SAAA/B,GACtB,OAAmCgC,EAAAA,EAAAA,UAAS,IAA5C,eAAOf,EAAP,KAAegB,EAAf,KAWA,OARAC,EAAAA,EAAAA,YAAU,WACM,KAAVlC,IAEJD,EAAAA,EAAAA,IAASC,GAAOmC,MAAK,SAAAtC,GACnBoC,GAAiB,OAAIpC,EAASuC,SAC/B,GACF,GAAE,CAACpC,IAEG,CAAEiB,OAAAA,EACV,CDPoBoB,CAASrC,GAOtBsC,EAPN,EAAQrB,OAO2BsB,QAAO,SAAAlB,GAAK,OAC7CA,EAAMK,MAAMc,cAAcC,SAASzC,EAAMwC,cADI,IAI/C,OACE,4BACE,SAAC7B,EAAD,CAAWC,MAAOZ,EAAOa,SAXH,SAAAb,GAExB8B,EAD6B,KAAV9B,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,KASG,SAAC,EAAD,CAAQiB,OAAQqB,MAGrB,C","sources":["Api/Api.jsx","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","components/Movies.jsx","pages/MoviesPage.jsx","utils/hooks/useQuery.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const API_KEY = 'cb666b8d3023e727f90c417a602578cd';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getQuery = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false&page=1`\n  );\n  return response.data;\n};\n\nexport const getMovieId = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=3a7b9fae23d21ee4f1e0a0e3e74eac23&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=3a7b9fae23d21ee4f1e0a0e3e74eac23&language=en-US&page=1`\n  );\n  return response.data;\n};\n","import styled from \"styled-components\";\nimport { HiSearch } from \"react-icons/hi\";\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  justify-content:center;\n  position: relative;\n  margin-bottom: 16px;\n  \n  \n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n  max-width:600px;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n`;\n","import { Wrapper, Icon, Input } from \"./SearchBox.styled\";\nimport PropTypes from 'prop-types';\n\nexport const SearchBox = ({ value, onChange }) => {\n\n  return (\n    <Wrapper>\n      <Icon />\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n      />\n    </Wrapper>\n  );\n};\n\nSearchBox.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange:PropTypes.func.isRequired\n};","import { Link, useLocation } from 'react-router-dom';\nimport Loader from './Loader/Loader';\n\n\nconst Movies = ({ movies }) => {\n  const location = useLocation();\n\n  if (!movies) return <Loader />;\n\n  return (\n    <ul>\n      {movies.map(movie => {\n        return (\n          <li key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default Movies;\n","import { SearchBox } from 'components/SearchBox/SearchBox';\nimport Movies from 'components/Movies';\nimport { useQuery } from 'utils/hooks/useQuery';\nimport { useSearchParams } from 'react-router-dom';\n//import { useMemo } from \"react\";\n//import debounce from \"debounce\";\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const { movies } = useQuery(query);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  const visibleListOfMovies = movies.filter(movie =>\n    movie.title.toLowerCase().includes(query.toLowerCase())\n  );\n\n  return (\n    <div>\n      <SearchBox value={query} onChange={updateQueryString} />\n      <Movies movies={visibleListOfMovies} />\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import { getQuery } from 'Api/Api';\nimport { useEffect, useState } from 'react';\n\n\nexport const useQuery = query => {\n  const [movies, setSearchedMovie] = useState([]);\n \n\n  useEffect(() => {\n    if (query === \"\") return;\n   \n    getQuery(query).then(response => {\n      setSearchedMovie([...response.results]);\n    });\n  }, [query]);\n\n  return { movies };\n};\n\n"],"names":["axios","API_KEY","getTrending","response","data","getQuery","query","getMovieId","movieId","getCast","cast","getReviews","Wrapper","styled","Input","Icon","HiSearch","SearchBox","value","onChange","type","e","target","movies","location","useLocation","map","movie","to","id","state","from","title","Loader","useSearchParams","searchParams","setSearchParams","get","useState","setSearchedMovie","useEffect","then","results","useQuery","visibleListOfMovies","filter","toLowerCase","includes"],"sourceRoot":""}